@page "/"
@using Microsoft.AspNetCore.Blazor.Browser.Interop
@using System.Text;
@inject HttpClient _httpClient
@using ZapTube.Models;



@functions
{
    YouTubeModel model;
    const string YOUTUBE_API_KEY = "YOUR_YOUTUBE_API_KEY";
    string text, err, currentVideoUrl = "", regionCode="IT";
    int currentVideo = 0, offset = 0, categoryId=0;
    const int MAX_NUMBER_OF_VIDEO = 50;
    bool[] viewedVideos = new bool[MAX_NUMBER_OF_VIDEO];
    bool collapseNavMenu = true, autoRegionCode=true;
    Random rnd = new Random();
    StringBuilder sb = new StringBuilder();
    Dictionary<string, int> categories = new Dictionary<string, int>
    {
        { "Trending", 0 },
        { "Music", 10 },
        {"Sport",17 },
        {"Gaming",20 },
        {"Science",28 },
        {"Trailers",44 }
    };


    protected override async Task OnInitAsync()
    {

        await FetchData();
        RandomVideo();
    }

    /// <summary>
    /// Fetch a list of videos from youtube
    /// </summary>
    /// <returns></returns>
    protected async Task FetchData()
    {
        _httpClient.BaseAddress = new System.Uri("https://www.googleapis.com/youtube/v3/");

        if (autoRegionCode)
        {
            string tempregionCode = RegisteredFunction.Invoke<string>("local");
            if (tempregionCode.Contains("-"))
                regionCode = tempregionCode.Split('-')[1];
        }

        text = await _httpClient.GetStringAsync(GenerateUrl());
        try
        {
            model = JsonUtil.Deserialize<YouTubeModel>(text);
        }
        catch (Exception ex)
        {
            err = ex.ToString();
        }
    }

    /// <summary>
    /// Generate our api url with some filters
    /// </summary>
    /// <returns></returns>
    string GenerateUrl()
    {
        sb.Clear();
        //First we set most popular and regionCode
        sb.Append("videos?part=id&chart=mostPopular&regionCode=");
        sb.Append(regionCode);
        //Then the maximum number of results
        sb.Append("&maxResults=");
        sb.Append(MAX_NUMBER_OF_VIDEO);
        //Then the video category
        sb.Append("&videoCategoryId=");
        sb.Append(categoryId);
        //And at last our youtube api key
        sb.Append("&key=");
        sb.Append(YOUTUBE_API_KEY);
        return sb.ToString();
    }

    /// <summary>
    /// Get randomly a new unwatched video from our list and set url and offset
    /// </summary>
    void RandomVideo()
    {
        rnd = new Random();
        CheckResetViews();
        int i = rnd.Next(MAX_NUMBER_OF_VIDEO);
        while (viewedVideos[i])
        {
            i = rnd.Next(MAX_NUMBER_OF_VIDEO);

        }
        currentVideo = i;
        currentVideoUrl = model.items.ElementAt(currentVideo).id;
        viewedVideos[currentVideo] = true;
        offset = 60 + i;
    }

    /// <summary>
    /// Check if all videos are watched. If it's true, reset the viewedVideos array
    /// </summary>
    void CheckResetViews()
    {
        if (!viewedVideos.Any(x => !x))
            viewedVideos = new bool[MAX_NUMBER_OF_VIDEO];
    }

    /// <summary>
    /// Change the region code and re-fetch the videos list. The load a new video
    /// </summary>
    /// <param name="newRegionCode"></param>
    /// <returns></returns>
    async Task ChangeRegionCode(string newRegionCode)
    {
        regionCode = newRegionCode;
        autoRegionCode = false;
        await FetchData();
        RandomVideo();
    }

    /// <summary>
    /// Change the category id and re-fetch the videos list. The load a new video
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    async Task ChangeCategory(int id)
    {
        categoryId = id;
        await FetchData();
        RandomVideo();
    }

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }  
}

<div class="sidebar">
    <div class="top-row pl-4 navbar navbar-dark">
        <a class="navbar-brand" href="">zapTube</a>
        <button class="navbar-toggler" onclick=@ToggleNavMenu>
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class=@(collapseNavMenu ? "collapse" : null) onclick=@ToggleNavMenu>
        <ul class="nav flex-column">
            <li class="nav-item px-3">
                <a class=' nav-link @(categoryId==categories["Trending"]?"active":"")' onclick=@(async () => await ChangeCategory(categories["Trending"])) href="">
                    <span class="oi oi-thumb-up" aria-hidden="true"></span> Trending
                </a>
            </li>
            <li class="nav-item px-3">
                <a class=' nav-link @(categoryId==categories["Music"]?"active":"")' onclick=@(async () => await ChangeCategory(categories["Music"])) href="">
                    <span class="oi oi-musical-note" aria-hidden="true"></span> Music
                </a>
            </li>
            <li class="nav-item px-3">
                <a class=' nav-link @(categoryId==categories["Sport"]?"active":"")' onclick=@(async () => await ChangeCategory(categories["Sport"])) href="">
                    <span class="oi oi-star" aria-hidden="true"></span> Sport
                </a>
            </li>
            <li class="nav-item px-3">
                <a class=' nav-link @(categoryId==categories["Gaming"]?"active":"")' onclick=@(async () => await ChangeCategory(categories["Gaming"])) href="">
                    <span class="oi oi-monitor" aria-hidden="true"></span> Gaming
                </a>
            </li>
            <li class="nav-item px-3">
                <a class=' nav-link @(categoryId==categories["Science"]?"active":"")' onclick=@(async () => await ChangeCategory(categories["Science"])) href="">
                    <span class="oi oi-beaker" aria-hidden="true"></span> Science & Technology
                </a>
            </li>
            <li class="nav-item px-3">
                <a class=' nav-link @(categoryId==categories["Trailers"]?"active":"")' onclick=@(async () => await ChangeCategory(categories["Trailers"])) href="">
                    <span class="oi oi-video" aria-hidden="true"></span> Trailers
                </a>
            </li>
            <li>
                <hr />
            </li>
            <li class="nav-item px-3">
                <button type="button" onclick="@RandomVideo" class="btn btn-block btn-outline-success">
                    Zap!
                </button>
            </li>
            <li>
                <hr />
            </li>
            <li class="nav-item px-3">
                <a class='@(regionCode=="US"?"active":"")' onclick=@(async () => await ChangeRegionCode("US"))> <img src="https://image.flaticon.com/icons/svg/206/206626.svg" style="max-width:30px;" class="d-block mx-auto" /> </a>
                <a class='@(regionCode=="BR"?"active":"")' onclick=@(async () => await ChangeRegionCode("BR"))> <img src="https://image.flaticon.com/icons/svg/206/206597.svg" style="max-width:30px;" class="d-block mx-auto" /> </a>
                <a class='@(regionCode=="RU"?"active":"")' onclick=@(async () => await ChangeRegionCode("RU"))> <img src="https://image.flaticon.com/icons/svg/206/206604.svg" style="max-width:30px;" class="d-block mx-auto" /> </a>
                <a class='@(regionCode=="JP"?"active":"")' onclick=@(async () => await ChangeRegionCode("JP"))> <img src="https://image.flaticon.com/icons/svg/206/206789.svg" style="max-width:30px;" class="d-block mx-auto" /> </a>
                <a class='@(regionCode=="GB"?"active":"")' onclick=@(async () => await ChangeRegionCode("GB"))> <img src="https://image.flaticon.com/icons/svg/206/206592.svg" style="max-width:30px;" class="d-block mx-auto" /> </a>
                <a class='@(regionCode=="DE"?"active":"")' onclick=@(async () => await ChangeRegionCode("DE"))> <img src="https://image.flaticon.com/icons/svg/206/206690.svg" style="max-width:30px;" class="d-block mx-auto" /> </a>
                <a class='@(regionCode=="FR"?"active":"")' onclick=@(async () => await ChangeRegionCode("FR"))> <img src="https://image.flaticon.com/icons/svg/206/206657.svg" style="max-width:30px;" class="d-block mx-auto" /> </a>
                <a class='@(regionCode=="IT"?"active":"")' onclick=@(async () => await ChangeRegionCode("IT"))> <img src="https://image.flaticon.com/icons/svg/206/206839.svg" style="max-width:30px;" class="d-block mx-auto" /> </a>
            </li>
        </ul>
    </div>

 
</div>

<div class="main">
    <div class="content">
        @if (!String.IsNullOrEmpty(currentVideoUrl))
        {
            <div class="videoWrapper">
                <iframe width="1280" height="720" src="//www.youtube.com/embed/@currentVideoUrl?autoplay=1&start=@offset" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
            </div>
        }
        <hr />
        <div class="container">
            <div class="row">
                <div class="col-sm">
                    <p>You can change country and topics within the sidebar! </p>
                    <button type="button" onclick="@RandomVideo" class="btn btn-outline-success">
                        Zap!
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>